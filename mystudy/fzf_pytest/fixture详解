fixture区别于unnitest的传统单元测试（setup/teardown）:
  1.有独立的命名，并通过声明它们从测试函数、模块、类或整个项目中的使用来激活
  2.按模块化的方式实现，每个fixture都可以互相调用。
  3.fixture的范围从简单的单元测试到复杂的功能测试，可以对fixture配置参数，或者跨函数function，类class，模块module或整个测试session范围

fixture的作用范围:
fixture里面有个scope参数可以控制fixture的作用范围: session>module>class>function
-function：每一个函数或方法都会调用
-class：每一个类调用一次，一个类中可以有多个方法
-module：每一个.py文件调用一次，该文件内又有多个function和class
-session：是多个文件调用一次，可以跨.py文件调用，每个.py文件就是module

fixture源码详解:
fixture（scope='function'，params=None，autouse=False，ids=None，name=None）:
-scope：有四个级别参数"function"（默认），"class"，"module"，"session"
-params：一个可选的参数列表，它将导致多个参数调用fixture功能和所有测试使用它。
-autouse：如果True，则为所有测试激活fixture func可以看到它。如果为False则显示需要参考来激活fixture
-ids：每个字符串id的列表，每个字符串对应于params这样他们就是测试ID的一部分。如果没有提供ID它们将从params自动生成
-name：fixture的名称。这默认为装饰函数的名称。如果fixture在定义它的统一模块中使用，夹具的功能名称将被请求夹具的功能arg遮蔽，解决这个问题的一种方法时将装饰函数命令"fixture_<fixturename>"然后使用"@pytest.fixture（name='<fixturename>'）"

scope = 'functtion':
-@pytest.fixture（）如果不写参数，参数就是scope="function"，它的作用范围是每个测试用例来之前运行一次，销毁代码在测试用例之后运行
scope="class":
-fixture为class级别的时候，如果一个class里面有多个用例，都调用了次fixture，那么此fixture只在此class里所有用例开始前执行一次
scope="module":
-fixture为module时，在当前.py脚本里面所有用例开始前只执行一次
scope="session":
-fixture为session级别是可以跨.py模块调用的，也就是当我们有多个.py文件的用例的时候，
如果多个用例只需调用一次fixture，那就可以设置为scope="session"，并且写到conftest.py文件里

conftest.py的作用范围:
--conftest.py文件名称时固定的，pytest会自动识别该文件。放到项目的根目录下就可以全局调用了，如果放到某个package下，那就在该package内有效:
一个工程下可以建多个conftest.py的文件，一般在工程根目录下设置的conftest文件起到全局作用
在不同子目录下也可以放conftest.py的文件，作用范围只能在改层级以及以下目录生效
